)
nba_cho_summary
## model here
nba_mod1 <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
modelsummary(nba_mod1,
fmt = fmt_significant(2),
shape = term ~ model + statistic,
statistic = c("std.error","conf.int","p.value"),
exponentiate = TRUE,
gof_map=NA)
nba_cho <- nba_cho %>%
mutate(FieldGoals_adjusted = FieldGoals. * 100)
nba_mod2 <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
modelsummary(
nba_mod2,
fmt = fmt_significant(2),
shape = term ~ model + statistic,
statistic = c("std.error", "conf.int", "p.value"),
exponentiate = TRUE,
gof_map = NA
)
predicted_probs <- predict(nba_mod2, type = "response")
conf_matrix <- confusionMatrix(factor(ifelse(predicted_probs > 0.5, 1, 0)),
factor(ifelse(nba_cho$Win == "Win", 1, 0)))
print(conf_matrix)
accuracy <- conf_matrix$overall['Accuracy']
print(paste("Accuracy:", accuracy))
roc_curve <- roc(nba_cho$Win, predicted_probs)
plot(roc_curve, main = "ROC Curve for Win Prediction", col = "red")
auc_value <- auc(roc_curve)
print(paste("AUC:", auc_value))
predicted_probs <- predict(nba_mod2, type = "response")
conf_matrix <- confusionMatrix(factor(ifelse(predicted_probs > 0.5, 1, 0)),
factor(ifelse(nba_cho$Win == "Win", 1, 0)))
print(conf_matrix)
accuracy <- conf_matrix$overall['Accuracy']
print(paste("Accuracy:", accuracy))
roc_curve <- roc(nba_cho$Win, predicted_probs)
plot(roc_curve, main = "ROC Curve for Win Prediction", col = "red")
auc_value <- auc(roc_curve)
print(paste("AUC:", auc_value))
library(tidyverse)
library(modelsummary)
library(caret)
library(pROC)
nba <- read.csv("https://raw.githubusercontent.com/anlane611/datasets/refs/heads/main/nba_games_stats.csv")
## create subset
nba_cho <- nba |>
filter(Team == "CHO")
## create factor variable for Home
nba_cho <- nba_cho |>
mutate(Home = as.factor(Home))
## create new Win variable (include quality control check)
nba_cho <- nba_cho |>
mutate(
Win = ifelse(WINorLOSS == "W", 1, 0),
Win = factor(Win, levels = c(0, 1), labels = c("Loss", "Win"))
)
## format date variable
nba_cho <- nba_cho |>
mutate(Date_clean = as.Date(Date, "%Y-%m-%d"))
nba_cho
## code to fill in the table
nba_cho_summary <- nba_cho %>%
group_by(Win) %>%
summarise(
Count = n(),
Home_games_N = sum(Home == "Home"),
Home_games_Percentage = mean(Home == "Home") * 100,
Team_Points_mean = mean(TeamPoints),
Team_Points_sd = sd(TeamPoints),
FieldGoal_Percentage_mean = mean(FieldGoals., na.rm = TRUE),
FieldGoal_Percentage_sd = sd(FieldGoals., na.rm = TRUE),
Assists_mean = mean(Assists),
Assists_sd = sd(Assists),
Steals_mean = mean(Steals),
Steals_sd = sd(Steals),
Blocks_mean = mean(Blocks),
Blocks_sd = sd(Blocks),
Opponent_Points_mean = mean(OpponentPoints),
Opponent_Points_sd = sd(OpponentPoints),
Total_Rebounds_mean = mean(TotalRebounds),
Total_Rebounds_sd = sd(TotalRebounds),
Turnovers_mean = mean(Turnovers),
Turnovers_sd = sd(Turnovers)
)
nba_cho_summary
## model here
nba_mod1 <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
modelsummary(nba_mod1,
fmt = fmt_significant(2),
shape = term ~ model + statistic,
statistic = c("std.error","conf.int","p.value"),
exponentiate = TRUE,
gof_map=NA)
nba_cho <- nba_cho %>%
mutate(FieldGoals_adjusted = FieldGoals. * 100)
nba_mod2 <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
modelsummary(
nba_mod2,
fmt = fmt_significant(2),
shape = term ~ model + statistic,
statistic = c("std.error", "conf.int", "p.value"),
exponentiate = TRUE,
gof_map = NA
)
predicted_probs <- predict(nba_mod2, type = "response")
conf_matrix <- confusionMatrix(factor(ifelse(predicted_probs > 0.5, 1, 0)),
factor(ifelse(nba_cho$Win == "Win", 1, 0)))
print(conf_matrix)
accuracy <- conf_matrix$overall['Accuracy']
print(paste("Accuracy:", accuracy))
roc_curve <- roc(ifelse(nba_cho$Win == "Win", 1, 0), predicted_probs)
plot(roc_curve, main = "ROC Curve for Win Prediction", col = "red")
auc_value <- auc(roc_curve)
print(paste("AUC:", auc_value))
nba_mod_original <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists + Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
nba_mod_expanded <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists + Steals + Blocks + TotalRebounds + Turnovers +
Opp.TeamPoints + Opp.FieldGoals. + Opp.Assists + Opp.Steals + Opp.Blocks + Opp.TotalRebounds + Opp.Turnovers,
data = nba_cho,
family = binomial()
)
nba_mod_original <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists + Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
nba_mod_expanded <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists + Steals + Blocks + TotalRebounds + Turnovers +
Opp.TeamPoints + OppFieldGoals. + OppAssists + OppSteals + OppBlocks + OppTotalRebounds + OppTurnovers,
data = nba_cho,
family = binomial()
)
nba_mod_original <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists + Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
nba_mod_expanded <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists + Steals + Blocks + TotalRebounds + Turnovers +
OppTeamPoints + OppFieldGoals. + OppAssists + OppSteals + OppBlocks + OppTotalRebounds + OppTurnovers,
data = nba_cho,
family = binomial()
)
View(nba_mod_original)
library(tidyverse)
library(modelsummary)
library(caret)
library(pROC)
nba <- read.csv("https://raw.githubusercontent.com/anlane611/datasets/refs/heads/main/nba_games_stats.csv")
## create subset
nba_cho <- nba |>
filter(Team == "CHO")
## create factor variable for Home
nba_cho <- nba_cho |>
mutate(Home = as.factor(Home))
## create new Win variable (include quality control check)
nba_cho <- nba_cho |>
mutate(
Win = ifelse(WINorLOSS == "W", 1, 0),
Win = factor(Win, levels = c(0, 1), labels = c("Loss", "Win"))
)
## format date variable
nba_cho <- nba_cho |>
mutate(Date_clean = as.Date(Date, "%Y-%m-%d"))
nba_cho
nba_mod_original <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists + Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
library(tidyverse)
library(modelsummary)
library(caret)
library(pROC)
nba <- read.csv("https://raw.githubusercontent.com/anlane611/datasets/refs/heads/main/nba_games_stats.csv")
## create subset
nba_cho <- nba |>
filter(Team == "CHO")
## create factor variable for Home
nba_cho <- nba_cho |>
mutate(Home = as.factor(Home))
## create new Win variable (include quality control check)
nba_cho <- nba_cho |>
mutate(
Win = ifelse(WINorLOSS == "W", 1, 0),
Win = factor(Win, levels = c(0, 1), labels = c("Loss", "Win"))
)
## format date variable
nba_cho <- nba_cho |>
mutate(Date_clean = as.Date(Date, "%Y-%m-%d"))
nba_cho
## code to fill in the table
nba_cho_summary <- nba_cho %>%
group_by(Win) %>%
summarise(
Count = n(),
Home_games_N = sum(Home == "Home"),
Home_games_Percentage = mean(Home == "Home") * 100,
Team_Points_mean = mean(TeamPoints),
Team_Points_sd = sd(TeamPoints),
FieldGoal_Percentage_mean = mean(FieldGoals., na.rm = TRUE),
FieldGoal_Percentage_sd = sd(FieldGoals., na.rm = TRUE),
Assists_mean = mean(Assists),
Assists_sd = sd(Assists),
Steals_mean = mean(Steals),
Steals_sd = sd(Steals),
Blocks_mean = mean(Blocks),
Blocks_sd = sd(Blocks),
Opponent_Points_mean = mean(OpponentPoints),
Opponent_Points_sd = sd(OpponentPoints),
Total_Rebounds_mean = mean(TotalRebounds),
Total_Rebounds_sd = sd(TotalRebounds),
Turnovers_mean = mean(Turnovers),
Turnovers_sd = sd(Turnovers)
)
nba_cho_summary
## model here
nba_mod1 <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
modelsummary(nba_mod1,
fmt = fmt_significant(2),
shape = term ~ model + statistic,
statistic = c("std.error","conf.int","p.value"),
exponentiate = TRUE,
gof_map=NA)
nba_cho <- nba_cho %>%
mutate(FieldGoals_adjusted = FieldGoals. * 100)
nba_mod2 <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
modelsummary(
nba_mod2,
fmt = fmt_significant(2),
shape = term ~ model + statistic,
statistic = c("std.error", "conf.int", "p.value"),
exponentiate = TRUE,
gof_map = NA
)
predicted_probs <- predict(nba_mod2, type = "response")
conf_matrix <- confusionMatrix(factor(ifelse(predicted_probs > 0.5, 1, 0)),
factor(ifelse(nba_cho$Win == "Win", 1, 0)))
print(conf_matrix)
accuracy <- conf_matrix$overall['Accuracy']
print(paste("Accuracy:", accuracy))
roc_curve <- roc(ifelse(nba_cho$Win == "Win", 1, 0), predicted_probs)
plot(roc_curve, main = "ROC Curve for Win Prediction", col = "red")
auc_value <- auc(roc_curve)
print(paste("AUC:", auc_value))
nba_mod_original <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists + Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
nba_mod_expanded <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists + Steals + Blocks + TotalRebounds + Turnovers +
Opp.TeamPoints + Opp.FieldGoals. + Opp.Assists + Opp.Steals + Opp.Blocks + Opp.TotalRebounds + Opp.Turnovers,
data = nba_cho,
family = binomial()
)
nba_mod_original <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho, family = binomial()
)
nba_mod_expanded <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers +
OpponentPoints + Opp.FieldGoals. + Opp.Assists +
Opp.Steals + Opp.Blocks + Opp.TotalRebounds + Opp.Turnovers,
data = nba_cho, family = binomial()
)
anova(nba_mod_original, nba_mod_expanded, test = "Chisq")
library(tidyverse)
library(modelsummary)
library(caret)
library(pROC)
nba <- read.csv("https://raw.githubusercontent.com/anlane611/datasets/refs/heads/main/nba_games_stats.csv")
## create subset
nba_cho <- nba |>
filter(Team == "CHO")
## create factor variable for Home
nba_cho <- nba_cho |>
mutate(Home = as.factor(Home))
## create new Win variable (include quality control check)
nba_cho <- nba_cho |>
mutate(
Win = ifelse(WINorLOSS == "W", 1, 0),
Win = factor(Win, levels = c(0, 1), labels = c("Loss", "Win"))
)
## format date variable
nba_cho <- nba_cho |>
mutate(Date_clean = as.Date(Date, "%Y-%m-%d"))
nba_cho
## code to fill in the table
nba_cho_summary <- nba_cho %>%
group_by(Win) %>%
summarise(
Count = n(),
Home_games_N = sum(Home == "Home"),
Home_games_Percentage = mean(Home == "Home") * 100,
Team_Points_mean = mean(TeamPoints),
Team_Points_sd = sd(TeamPoints),
FieldGoal_Percentage_mean = mean(FieldGoals., na.rm = TRUE),
FieldGoal_Percentage_sd = sd(FieldGoals., na.rm = TRUE),
Assists_mean = mean(Assists),
Assists_sd = sd(Assists),
Steals_mean = mean(Steals),
Steals_sd = sd(Steals),
Blocks_mean = mean(Blocks),
Blocks_sd = sd(Blocks),
Opponent_Points_mean = mean(OpponentPoints),
Opponent_Points_sd = sd(OpponentPoints),
Total_Rebounds_mean = mean(TotalRebounds),
Total_Rebounds_sd = sd(TotalRebounds),
Turnovers_mean = mean(Turnovers),
Turnovers_sd = sd(Turnovers)
)
nba_cho_summary
## model here
nba_mod1 <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
modelsummary(nba_mod1,
fmt = fmt_significant(2),
shape = term ~ model + statistic,
statistic = c("std.error","conf.int","p.value"),
exponentiate = TRUE,
gof_map=NA)
nba_cho <- nba_cho %>%
mutate(FieldGoals_adjusted = FieldGoals. * 100)
nba_mod2 <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
modelsummary(
nba_mod2,
fmt = fmt_significant(2),
shape = term ~ model + statistic,
statistic = c("std.error", "conf.int", "p.value"),
exponentiate = TRUE,
gof_map = NA
)
predicted_probs <- predict(nba_mod2, type = "response")
conf_matrix <- confusionMatrix(factor(ifelse(predicted_probs > 0.5, 1, 0)),
factor(ifelse(nba_cho$Win == "Win", 1, 0)))
print(conf_matrix)
accuracy <- conf_matrix$overall['Accuracy']
print(paste("Accuracy:", accuracy))
roc_curve <- roc(ifelse(nba_cho$Win == "Win", 1, 0), predicted_probs)
plot(roc_curve, main = "ROC Curve for Win Prediction", col = "red")
auc_value <- auc(roc_curve)
print(paste("AUC:", auc_value))
nba_mod_original <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho, family = binomial()
)
nba_mod_expanded <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers +
OpponentPoints + Opp.FieldGoals. + Opp.Assists +
Opp.Steals + Opp.Blocks + Opp.TotalRebounds + Opp.Turnovers,
data = nba_cho, family = binomial()
)
anova(nba_mod_original, nba_mod_expanded, test = "Chisq")
nba_mod1 <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
modelsummary(nba_mod1,
fmt = fmt_significant(2),
shape = term ~ model + statistic,
statistic = c("std.error","conf.int","p.value"),
exponentiate = TRUE,
gof_map=NA)
library(tidyverse)
library(modelsummary)
library(caret)
library(pROC)
nba <- read.csv("https://raw.githubusercontent.com/anlane611/datasets/refs/heads/main/nba_games_stats.csv")
## create subset
nba_cho <- nba |>
filter(Team == "CHO")
## create factor variable for Home
nba_cho <- nba_cho |>
mutate(Home = as.factor(Home))
## create new Win variable (include quality control check)
nba_cho <- nba_cho |>
mutate(
Win = ifelse(WINorLOSS == "W", 1, 0),
Win = factor(Win, levels = c(0, 1), labels = c("Loss", "Win"))
)
## format date variable
nba_cho <- nba_cho |>
mutate(Date_clean = as.Date(Date, "%Y-%m-%d"))
nba_cho
## code to fill in the table
nba_cho_summary <- nba_cho %>%
group_by(Win) %>%
summarise(
Count = n(),
Home_games_N = sum(Home == "Home"),
Home_games_Percentage = mean(Home == "Home") * 100,
Team_Points_mean = mean(TeamPoints),
Team_Points_sd = sd(TeamPoints),
FieldGoal_Percentage_mean = mean(FieldGoals., na.rm = TRUE),
FieldGoal_Percentage_sd = sd(FieldGoals., na.rm = TRUE),
Assists_mean = mean(Assists),
Assists_sd = sd(Assists),
Steals_mean = mean(Steals),
Steals_sd = sd(Steals),
Blocks_mean = mean(Blocks),
Blocks_sd = sd(Blocks),
Opponent_Points_mean = mean(OpponentPoints),
Opponent_Points_sd = sd(OpponentPoints),
Total_Rebounds_mean = mean(TotalRebounds),
Total_Rebounds_sd = sd(TotalRebounds),
Turnovers_mean = mean(Turnovers),
Turnovers_sd = sd(Turnovers)
)
nba_cho_summary
nba_mod1 <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
modelsummary(nba_mod1,
fmt = fmt_significant(2),
shape = term ~ model + statistic,
statistic = c("std.error","conf.int","p.value"),
exponentiate = TRUE,
gof_map=NA)
nba_cho <- nba_cho %>%
mutate(FieldGoals_adjusted = FieldGoals. * 100)
nba_mod2 <- glm(
Win ~ Home + TeamPoints + FieldGoals_adjusted + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho,
family = binomial()
)
modelsummary(
nba_mod2,
fmt = fmt_significant(2),
shape = term ~ model + statistic,
statistic = c("std.error", "conf.int", "p.value"),
exponentiate = TRUE,
gof_map = NA
)
predicted_probs <- predict(nba_mod2, type = "response")
conf_matrix <- confusionMatrix(factor(ifelse(predicted_probs > 0.5, 1, 0)),
factor(ifelse(nba_cho$Win == "Win", 1, 0)))
print(conf_matrix)
accuracy <- conf_matrix$overall['Accuracy']
print(paste("Accuracy:", accuracy))
roc_curve <- roc(ifelse(nba_cho$Win == "Win", 1, 0), predicted_probs)
plot(roc_curve, main = "ROC Curve for Win Prediction", col = "red")
auc_value <- auc(roc_curve)
print(paste("AUC:", auc_value))
nba_mod_original <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers,
data = nba_cho, family = binomial()
)
nba_mod_expanded <- glm(
Win ~ Home + TeamPoints + FieldGoals. + Assists +
Steals + Blocks + TotalRebounds + Turnovers +
OpponentPoints + Opp.FieldGoals. + Opp.Assists +
Opp.Steals + Opp.Blocks + Opp.TotalRebounds + Opp.Turnovers,
data = nba_cho, family = binomial()
)
anova(nba_mod_original, nba_mod_expanded, test = "Chisq")
